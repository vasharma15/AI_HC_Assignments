# -*- coding: utf-8 -*-
"""Prescribed_Medications.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JDq4rqxHRWosR3QgSNn82EQe8RsYg-P8
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import files

# Upload files in Google Colab
uploaded = files.upload()

# Read the uploaded files
d_labitems = pd.read_csv('D_LABITEMS.csv')
patients = pd.read_csv('PATIENTS.csv')
prescriptions = pd.read_csv('PRESCRIPTIONS.csv')

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Read the CSV files
patients = pd.read_csv('PATIENTS.csv')
prescriptions = pd.read_csv('PRESCRIPTIONS.csv')

# Convert date columns to datetime
patients['dob'] = pd.to_datetime(patients['dob'])
prescriptions['startdate'] = pd.to_datetime(prescriptions['startdate'])

# Calculate age at prescription
current_date = pd.Timestamp('2025-01-28')
patients['age'] = ((current_date - patients['dob']).dt.days / 365.25).astype(int)

# Merge patients and prescriptions data
merged_data = pd.merge(prescriptions, patients[['subject_id', 'gender', 'age']], on='subject_id')

# Top 10 most prescribed medications
plt.figure(figsize=(12, 6))
top_medications = merged_data['drug'].value_counts().head(10)
sns.barplot(x=top_medications.index, y=top_medications.values)
plt.title('Top 10 Most Prescribed Medications', fontsize=16)
plt.xlabel('Medication', fontsize=12)
plt.ylabel('Number of Prescriptions', fontsize=12)
plt.xticks(rotation=45, ha='right')

# Add data labels
for i, v in enumerate(top_medications.values):
    plt.text(i, v + 0.5, str(v), ha='center', va='bottom')

plt.tight_layout()
plt.show()

print("Conclusion: The bar chart reveals the most frequently prescribed medications. This information is crucial for understanding prescription patterns and potentially identifying areas for further investigation or optimization in patient care.")

# Age distribution for top 5 medications
plt.figure(figsize=(12, 6))
top_5_meds = merged_data['drug'].value_counts().head(5).index
sns.boxplot(x='drug', y='age', data=merged_data[merged_data['drug'].isin(top_5_meds)])
plt.title('Age Distribution for Top 5 Prescribed Medications', fontsize=16)
plt.xlabel('Medication', fontsize=12)
plt.ylabel('Age', fontsize=12)
plt.xticks(rotation=45, ha='right')

# Add median age markers
medians = merged_data[merged_data['drug'].isin(top_5_meds)].groupby('drug')['age'].median()
for i, median in enumerate(medians):
    plt.text(i, median, f'Median: {median:.1f}', ha='center', va='bottom', fontweight='bold')

plt.tight_layout()
plt.show()

print("Conclusion: The box plot illustrates the age distribution for the top 5 prescribed medications. This visualization helps identify any age-related patterns in medication use, which can be valuable for tailoring treatment approaches for different age groups.")

# Gender distribution for top 5 medications
plt.figure(figsize=(12, 6))
gender_dist = merged_data[merged_data['drug'].isin(top_5_meds)].groupby(['drug', 'gender']).size().unstack()
gender_dist.plot(kind='bar', stacked=True)
plt.title('Gender Distribution for Top 5 Prescribed Medications', fontsize=16)
plt.xlabel('Medication', fontsize=12)
plt.ylabel('Number of Prescriptions', fontsize=12)
plt.legend(title='Gender')
plt.xticks(rotation=45, ha='right')

# Add data labels
for i in range(len(gender_dist)):
    total = gender_dist.iloc[i].sum()
    for j, v in enumerate(gender_dist.iloc[i]):
        plt.text(i, v/2 + (0 if j == 0 else gender_dist.iloc[i][0]),
                 f'{v}\n({v/total:.1%})', ha='center', va='center')

plt.tight_layout()
plt.show()

print("Conclusion: The stacked bar chart displays the gender distribution for the top 5 prescribed medications. This visualization helps identify any gender-specific patterns in medication prescriptions, which can be important for understanding potential differences in treatment approaches or health conditions between genders.")