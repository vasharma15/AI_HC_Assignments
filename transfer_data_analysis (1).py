# -*- coding: utf-8 -*-
"""Transfer_Data_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-p5F054WzwqfSmrMfgBJyOctFfHIFzWO
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
from plotly.subplots import make_subplots

from google.colab import files
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load patients data
d1 = files.upload()
patients = pd.read_csv('PATIENTS.csv')

# Load admissions data
d2 = files.upload()
admissions = pd.read_csv('ADMISSIONS.csv')

# Load transfers
d1 = files.upload()
patients = pd.read_csv('TRANSFERS.csv')

# Read the CSV file
df = pd.read_csv('TRANSFERS.csv')

# Convert intime and outtime to datetime
df['intime'] = pd.to_datetime(df['intime'])
df['outtime'] = pd.to_datetime(df['outtime'])

# Calculate length of stay in days
df['los_days'] = df['los'] / 24

# Group by care unit and calculate average length of stay
care_unit_los = df.groupby('curr_careunit')['los_days'].mean().sort_values(ascending=False)

# Plot average length of stay by care unit
plt.figure(figsize=(12, 6))
care_unit_los.plot(kind='bar')
plt.title('Average Length of Stay by Care Unit')
plt.xlabel('Care Unit')
plt.ylabel('Average Length of Stay (days)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Calculate admissions over time
df['admission_date'] = df['intime'].dt.date
admissions_over_time = df.groupby('admission_date').size().sort_index()

# Plot admissions over time
plt.figure(figsize=(12, 6))
admissions_over_time.plot()
plt.title('Admissions Over Time')
plt.xlabel('Date')
plt.ylabel('Number of Admissions')
plt.tight_layout()
plt.show()

# Calculate transfers between care units
transfers = df[df['eventtype'] == 'transfer']
transfer_counts = transfers.groupby(['prev_careunit', 'curr_careunit']).size().unstack(fill_value=0)

# Plot heatmap of transfers between care units
plt.figure(figsize=(12, 8))
plt.imshow(transfer_counts, cmap='YlOrRd')
plt.colorbar(label='Number of Transfers')
plt.title('Transfers Between Care Units')
plt.xlabel('To Care Unit')
plt.ylabel('From Care Unit')
plt.xticks(range(len(transfer_counts.columns)), transfer_counts.columns, rotation=45, ha='right')
plt.yticks(range(len(transfer_counts.index)), transfer_counts.index)
plt.tight_layout()
plt.show()
# Conclusion for the second graph
print("Conclusion: The admissions over time graph highlights patterns or trends, such as seasonal peaks or declines in hospital admissions. These insights can assist in resource planning.")

# Calculate transfers between care units
transfers_only = transfers[transfers['eventtype'] == 'transfer']
transfer_counts = transfers_only.groupby(['prev_careunit', 'curr_careunit']).size().unstack(fill_value=0)

# Plot heatmap of transfers between care units
plt.figure(figsize=(12, 8))
plt.imshow(transfer_counts, cmap='YlOrRd')
plt.colorbar(label='Number of Transfers')
plt.title('Transfers Between Care Units')
plt.xlabel('To Care Unit')
plt.ylabel('From Care Unit')
plt.xticks(range(len(transfer_counts.columns)), transfer_counts.columns, rotation=45, ha='right')
plt.yticks(range(len(transfer_counts.index)), transfer_counts.index)
plt.tight_layout()
plt.show()

# Conclusion for the third graph
print("Conclusion: The heatmap visualizes the volume of patient transfers between care units. Bright areas indicate frequent transfers, signaling common pathways or dependencies between units.")